namespace :xyzosx do
#  namespace :deps do
#    task :install => "homebrew:install"
#    namespace :homebrew do
#      desc "Install OS X dependencies using Homebrew"
#      task :install => [:customize, :install_libs, :uncustomize]

#      task :install_libs do
#        brew = Homebrew.new
#        brew.universal if ENV['SHOES_OSX_ARCH'] == "universal"
#        brew.install_packages
#      end

#      task :customize do
#        brew = Homebrew.new
#        brew.universal if ENV['SHOES_OSX_ARCH'] == "universal"
#        brew.add_custom_remote
#        brew.add_custom_formulas
#      end

#      task :uncustomize do
#        brew = Homebrew.new
#        brew.universal if ENV['SHOES_OSX_ARCH'] == "universal"
#        brew.remove_custom_formulas
#        brew.remove_custom_remote
#      end
#    end
#  end
  
  namespace :setup do
    desc "Setup to build Shoes for 10.9+"
    task :mavericks do
      sh "echo 'TGT_ARCH=mavericks-x86_64' >crosscompile"
    end
    
    desc "Setup to build for 10.6 to 10.8+"
    task :snow do
      sh "echo 'TGT_ARCH=snowleopard' >crosscompile"
    end
    
    desc "Setup to build Shoes just for my Mac (default)"
    task :clean do
      rm_rf "crosscompile"
    end 
  end
  
  if CROSS 
    task :build => [:old_build]
  else
    task :build => ["build_tasks:pre_build", :build_skel, "#{TGT_DIR}/#{NAME}", "#{TGT_DIR}/VERSION.txt", "build_tasks:build"]
  end
  
  namespace :build_tasks do

    #task :build => [:copy_files_to_dist, :common_build, :copy_deps_to_dist, :change_install_names, :setup_system_resources, :verify]
    task :build => [:copy_files_to_dist, :common_build, :setup_system_resources]

    # Make sure the installed ruby is capable of this build
    task :check_ruby_arch do
      build_arch, ruby_arch = [OSX_ARCH, RbConfig::CONFIG['ARCH_FLAG']].map {|s| s.split.reject {|w| w.include?("arch")}}
      if build_arch.length > 1 and build_arch.sort != ruby_arch.sort
        abort("To build universal shoes, you must first install a universal ruby")
      end
    end

    task :pre_build => :check_ruby_arch

    def copy_ext_osx xdir, libdir
      Dir.chdir(xdir) do
        `ruby extconf.rb; make`
      end
      copy_files "#{xdir}/*.bundle", libdir
    end

    task :common_build do
      puts "Entering common_build"
      mkdir_p "#{TGT_DIR}/lib/ruby/#{RUBY_V}/#{SHOES_RUBY_ARCH}"
      # FIXME: too lazy to figure out install_name_tool for this:
      cd TGT_DIR do
        dirp = RbConfig::CONFIG['libdir']
        so =   RbConfig::CONFIG['LIBRUBY_SO']
        ln_s "#{dirp}/#{so}", so unless File.exist? so
      end
      #cp_r  "#{EXT_RUBY}/lib/ruby/#{RUBY_V}", "dist/ruby/lib"
      #cp_r  "#{EXT_RUBY}/lib/ruby/#{RUBY_V}", "#{TGT_DIR}/lib/ruby"
      #cp "#{EXT_RUBY}/lib/libruby.dylib", "#{TGT_DIR}"
      %w[req/ftsearch/lib/* req/rake/lib/*].each do |rdir|
        #FileList[rdir].each { |rlib| cp_r rlib, "dist/ruby/lib" }
        FileList[rdir].each { |rlib| cp_r rlib, "#{TGT_DIR}/lib/ruby/#{RUBY_V}" }
     end
     #%w[req/binject/ext/binject_c req/ftsearch/ext/ftsearchrt req/bloopsaphone/ext/bloops req/chipmunk/ext/chipmunk].
     #  each { |xdir| copy_ext_osx xdir, "dist/ruby/lib/#{SHOES_RUBY_ARCH}" }
     %w[req/binject/ext/binject_c req/ftsearch/ext/ftsearchrt req/chipmunk/ext/chipmunk].
        each { |xdir| copy_ext_osx xdir, "#{TGT_DIR}/lib/ruby/#{RUBY_V}/#{SHOES_RUBY_ARCH}" }

      gdir = "#{TGT_DIR}/ruby/gems/#{RUBY_V}"
      #{'hpricot' => 'lib', 'json' => 'lib/json/ext', 'sqlite3' => 'lib'}.each do |gemn, xdir|
      {}.each do |gemn, xdir|
        spec = eval(File.read("req/#{gemn}/gemspec"))
        mkdir_p "#{gdir}/specifications"
        mkdir_p "#{gdir}/gems/#{spec.full_name}/lib"
        FileList["req/#{gemn}/lib/*"].each { |rlib| cp_r rlib, "#{gdir}/gems/#{spec.full_name}/lib" }
        mkdir_p "#{gdir}/gems/#{spec.full_name}/#{xdir}"
        FileList["req/#{gemn}/ext/*"].each { |elib| copy_ext_osx elib, "#{gdir}/gems/#{spec.full_name}/#{xdir}" }
        cp "req/#{gemn}/gemspec", "#{gdir}/specifications/#{spec.full_name}.gemspec"
      end
    end

    def dylibs_to_change lib
      `otool -L #{lib}`.split("\n").inject([]) do |dylibs, line|
        if  line =~ /^\S/ or line =~ /System|@executable_path|libobjc/
          dylibs
        else
          dylibs << line.gsub(/\s\(compatibility.*$/, '').strip
        end
      end
    end

    task :change_install_names do
      cd "#{TGT_DIR}" do
        ["#{NAME}-bin", "pango-querymodules", *Dir['*.dylib'], *Dir['pango/modules/*.so']].each do |f|
          sh "install_name_tool -id @executable_path/#{File.basename f} #{f}"
          dylibs = dylibs_to_change(f)
          dylibs.each do |dylib|
            # another Cecil hack
            chmod 0755, dylib if File.writable? dylib
            sh "install_name_tool -change #{dylib} @executable_path/#{File.basename dylib} #{f}"
          end
        end
      end
    end

    task :copy_pango_modules_to_dist do
      puts "Entering copy_pango_modules_to_dist"
      modules_file = `brew --prefix`.chomp << '/etc/pango/pango.modules'
      modules_path = File.open(modules_file) {|f| f.grep(/^# ModulesPath = (.*)$/){$1}.first}
      mkdir_p "#{TGT_DIR}/pango"
      cp_r modules_path, "#{TGT_DIR}/pango"
      # Another Cecil hack ahead
      Dir.glob("#{TGT_DIR}/pango/modules/*").each do |f|
        chmod 0755, f unless File.writable? f
      end
      cp `which pango-querymodules`.chomp, "#{TGT_DIR}/"
      # another hack
      chmod 0755, "#{TGT_DIR}/pango-querymodules"
    end

    task :copy_deps_to_dist => :copy_pango_modules_to_dist do
      puts "Entering copy_deps_to_dist"
      # Generate a list of dependencies straight from the generated files.
      # Start with dependencies of shoes-bin and pango-querymodules, and then
      # add the dependencies of those dependencies.
      dylibs = dylibs_to_change("#{TGT_DIR}/#{NAME}-bin")
      dylibs.concat dylibs_to_change("#{TGT_DIR}/pango-querymodules")
      dupes = []
      dylibs.each do |dylib|
        dylibs_to_change(dylib).each do |d|
          if dylibs.map {|lib| File.basename(lib)}.include?(File.basename(d))
            dupes << d
          else
            dylibs << d
          end
        end
      end
      #dylibs.each {|libn| cp "#{libn}", "dist/" unless File.exists? "dist/#{libn}"}
      # clunky hack begins - Homebrew keg issue? ro duplicates do exist
      # make my own dups hash - not the same as dupes. 
      dups = {}
      dylibs.each do |libn| 
        keyf = File.basename libn
        if !dups[keyf] 
          cp "#{libn}", "#{TGT_DIR}/"
          dups[keyf] = true
          chmod 0755, "#{TGT_DIR}/#{keyf}" unless File.writable? "#{TGT_DIR}/#{keyf}"
        end
      end
    end

    task :setup_system_resources do
      tmpd = "/tmp"
      mkdir_p tmpd
      puts "Perfoming :setup_system_resources from #{`pwd`} to dir #{tmpd} "
      rm_rf "#{tmpd}/#{APPNAME}.app"
      mkdir "#{tmpd}/#{APPNAME}.app"
      mkdir "#{tmpd}/#{APPNAME}.app/Contents"
      cp_r "#{TGT_DIR}", "#{tmpd}/#{APPNAME}.app/Contents/MacOS"
      mkdir "#{tmpd}/#{APPNAME}.app/Contents/Resources"
      mkdir "#{tmpd}/#{APPNAME}.app/Contents/Resources/English.lproj"
      sh "ditto \"#{APP['icons']['osx']}\" \"#{tmpd}/#{APPNAME}.app/App.icns\""
      sh "ditto \"#{APP['icons']['osx']}\" \"#{tmpd}/#{APPNAME}.app/Contents/Resources/App.icns\""
      rewrite "platform/mac/Info.plist", "#{tmpd}/#{APPNAME}.app/Contents/Info.plist"
      cp "platform/mac/version.plist", "#{tmpd}/#{APPNAME}.app/Contents/"
      #rewrite "platform/mac/pangorc", "#{tmpd}/#{APPNAME}.app/Contents/MacOS/pangorc"
      cp "platform/mac/command-manual.rb", "#{tmpd}/#{APPNAME}.app/Contents/MacOS/"
      rewrite "platform/mac/simple-launch", "#{tmpd}/#{APPNAME}.app/Contents/MacOS/#{NAME}-launch"
      chmod 0755, "#{tmpd}/#{APPNAME}.app/Contents/MacOS/#{NAME}-launch"
      chmod 0755, "#{tmpd}/#{APPNAME}.app/Contents/MacOS/#{NAME}-bin"
      rewrite "platform/mac/shoes", "#{tmpd}/#{APPNAME}.app/Contents/MacOS/#{NAME}"
      chmod 0755, "#{tmpd}/#{APPNAME}.app/Contents/MacOS/#{NAME}"
      #chmod_R 0755, "#{tmpd}/#{APPNAME}.app/Contents/MacOS/pango-querymodules"
      # cp InfoPlist.strings YourApp.app/Contents/Resources/English.lproj/
      `echo -n 'APPL????' > "#{tmpd}/#{APPNAME}.app/Contents/PkgInfo"`
      rm_rf "#{TGT_DIR}/#{APPNAME}.app"
      NFS=ENV['NFS_ALTP']
      mv "#{tmpd}/#{APPNAME}.app", "#{TGT_DIR}"
    end
  end

  #desc "Verify the build products"
  task :verify => ['verify:sanity', 'verify:lib_paths']

  namespace :verify do
    def report_error message
      STDERR.puts "BUILD ERROR: " + message
    end

    task :sanity do
      report_error "No #{APPNAME}.app file found" unless File.exist? "#{TGT_DIR}/#{APPNAME}.app"
      [NAME, "#{NAME}-launch", "#{NAME}-bin"].each do |f|
        report_error "No #{f} file found" unless File.exist? "#{TGT_DIR}/#{APPNAME}.app/Contents/MacOS/#{f}"
      end
    end

    task :lib_paths do
      cd "#{TGT_DIR}/#{APPNAME}.app/Contents/MacOS" do
        errors = []
        ["#{NAME}-bin", "pango-querymodules", *Dir['*.dylib'], *Dir['pango/modules/*.so']].each do |f|
          dylibs = dylibs_to_change(f)
          dylibs.each do |dylib|
            errors << "Suspect library path on #{f}:\n  #{dylib}\n  (check with `otool -L #{File.expand_path f}`)"
          end
        end
        errors.each {|e| report_error e}
      end
    end
  end

  task :make_app do
    if CROSS
      Builder.make_app "#{TGT_DIR}/#{NAME}"
    else
      puts "Central make_app"
      bin = "#{TGT_DIR}/#{NAME}-bin"
      rm_f "#{TGT_DIR}/#{NAME}"
      rm_f bin
      sh "#{CC} -L#{TGT_DIR} -o #{bin} bin/main.o #{LINUX_LIBS} -lshoes #{OSX_ARCH} -L/usr/local/lib -lgif"
    end
  end

  task :make_so do
    puts "Central make_so"
    name = "#{TGT_DIR}/lib#{SONAME}.#{DLEXT}"
    #ldflags = LINUX_LDFLAGS.sub! /INSTALL_NAME/, "-install_name @executable_path/lib#{SONAME}.#{DLEXT}"
    ldflags = LINUX_LDFLAGS.sub! /INSTALL_NAME/, ""
    sh "#{CC} -o #{name} #{OBJ.join(' ')} #{LINUX_LDFLAGS} #{LINUX_LIBS}"
    #%w[libpostproc.dylib libavformat.dylib libavcodec.dylib libavutil.dylib libruby.dylib].each do |libn|
    #    sh "install_name_tool -change /tmp/dep/lib/#{libn} ./deps/lib/#{libn} #{name}"
    #end
  end

  #task :installer => ['build_tasks:setup_system_resources', 'verify:sanity', 'verify:lib_paths', 'osx:dmg_create']
  if CROSS
    task :installer do
      Builder.make_installer
    end 
  else
    task :installer do # => ['osx:tbz_create']
      abort "Sorry, you can't distribute a Loose Shoes. It's tightly linked to your\
configuration that the other user won't have. You can build a Tight Shoes\
which is more universal. See 'rake -T' 'rake osx:setup:mavericks' perhaps?"
    end
  end 
  
  task :tbz_create do
    puts "tbz_create from #{`pwd`}"
    nfs=ENV['NFS_ALTP'] 
    mkdir_p "#{nfs}/pkg"
    distfile = "#{nfs}pkg/#{PKG}#{TINYVER}-osx10.9.tbz"
    Dir.chdir("#{nfs}dist") do
      #rm_rf distfile if File.exists? distfile 
      distname = "#{PKG}#{TINYVER}"
      sh "tar -cf #{distname}.tar #{APPNAME}.app"
      sh "bzip2 -f #{distname}.tar"
      mv "#{distname}.tar.bz2", "#{distfile}"
    end
  end 
  
  task :dmg_create do
    NFS=ENV['NFS_ALTP'] 
    # dmg_ds, dmg_jpg = "platform/mac/dmg_ds_store", "static/shoes-dmg.jpg"
    dmg_ds, dmg_jpg = "platform/mac/dmg_ds_store", "static/shoes-dmg.jpg"
    if APP['dmg']
      dmg_ds, dmg_jpg = APP['dmg']['ds_store'], APP['dmg']['background']
    end

    mkdir_p "#{NFS}pkg"
    rm_rf "#{NFS}dmg"
    mkdir_p "#{NFS}dmg"
    # cp_r "#{TGT_DIR}/#{APPNAME}.app", "#{NFS}dmg"
    mv "#{TGT_DIR}/#{APPNAME}.app", "#{NFS}dmg"
    unless ENV['APP']
      mv "#{NFS}dmg/#{APPNAME}.app/Contents/MacOS/samples", "#{NFS}dmg/samples"
    end
    ln_s "/Applications", "#{NFS}dmg/Applications"
    sh "chmod +x #{NFS}dmg/\"#{APPNAME}.app\"/Contents/MacOS/pango-querymodules"
    sh "chmod +x #{NFS}dmg/\"#{APPNAME}.app\"/Contents/MacOS/#{NAME}"
    sh "chmod +x #{NFS}dmg/\"#{APPNAME}.app\"/Contents/MacOS/#{NAME}-bin"
    sh "chmod +x #{NFS}dmg/\"#{APPNAME}.app\"/Contents/MacOS/#{NAME}-launch"
    sh "DYLD_LIBRARY_PATH= platform/mac/pkg-dmg --target #{NFS}pkg/#{PKG}.dmg --source #{NFS}dmg --volname '#{APPNAME}' --copy #{dmg_ds}:/.DS_Store --mkdir /.background --copy #{dmg_jpg}:/.background" # --format UDRW"
    rm_rf "#{NFS}dmg"
  end
end
